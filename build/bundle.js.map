{"version":3,"file":"bundle.js","mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S","sources":["webpack://snakegame/./compile/application/Model/Domain/Documents.js","webpack://snakegame/./compile/application/Model/Domain/Enums/ClassList.js","webpack://snakegame/./compile/application/Model/Domain/Enums/ConditionValue.js","webpack://snakegame/./compile/application/Model/Domain/Enums/KeyCodeList.js","webpack://snakegame/./compile/application/Model/Domain/Game.js","webpack://snakegame/./compile/application/Model/Domain/Snake.js","webpack://snakegame/./compile/application/Model/Service/BoardService.js","webpack://snakegame/./compile/application/Model/Service/SnakeService.js","webpack://snakegame/webpack/bootstrap","webpack://snakegame/webpack/runtime/define property getters","webpack://snakegame/webpack/runtime/hasOwnProperty shorthand","webpack://snakegame/webpack/runtime/make namespace object","webpack://snakegame/./compile/index.js"],"sourcesContent":["import { ClassList } from \"./Enums/ClassList.js\";\nconst Documents = {\n    table: document.querySelector(ClassList.table),\n    position: document.getElementsByTagName(\"tr\"),\n};\nexport { Documents };\n","var ClassList;\n(function (ClassList) {\n    ClassList[\"table\"] = \"#main__wrapper\";\n    ClassList[\"snake\"] = \"snake\";\n    ClassList[\"point\"] = \"point\";\n    ClassList[\"gameOverModal\"] = \".gameover__modal__wrapper\";\n    ClassList[\"tr\"] = \"tr\";\n})(ClassList || (ClassList = {}));\n;\nexport { ClassList };\n","var ConditionValue;\n(function (ConditionValue) {\n    ConditionValue[ConditionValue[\"row\"] = 36] = \"row\";\n    ConditionValue[ConditionValue[\"col\"] = 30] = \"col\";\n    ConditionValue[ConditionValue[\"normal\"] = 70] = \"normal\";\n    ConditionValue[ConditionValue[\"hard\"] = 40] = \"hard\";\n    ConditionValue[ConditionValue[\"startX\"] = 10] = \"startX\";\n    ConditionValue[ConditionValue[\"startY\"] = 15] = \"startY\";\n})(ConditionValue || (ConditionValue = {}));\nexport { ConditionValue };\n","var KeyCode;\n(function (KeyCode) {\n    KeyCode[\"ArrowRight\"] = \"ArrowRight\";\n    KeyCode[\"ArrowLeft\"] = \"ArrowLeft\";\n    KeyCode[\"ArrowUp\"] = \"ArrowUp\";\n    KeyCode[\"ArrowDown\"] = \"ArrowDown\";\n})(KeyCode || (KeyCode = {}));\nexport { KeyCode };\n","import { BoardService } from \"../Service/BoardService\";\nimport { SnakeService } from \"../Service/SnakeService\";\nimport { ConditionValue } from \"./Enums/ConditionValue\";\nimport { Documents } from \"./Documents\";\nconst Game = {\n    point: 0,\n    isModal: false,\n    snakeInit: (Snake) => {\n        Snake.onX = ConditionValue.startX;\n        Snake.onY = ConditionValue.startY;\n        Snake.bodys = [SnakeService.initBodys()];\n        Snake.pointYX = BoardService.makePoint();\n        Documents.position[Snake.startY].children[Snake.startX].classList.toggle('snake');\n        Documents.position[Snake.pointYX[0]].children[Snake.pointYX[1]].classList.toggle('point');\n    }\n};\nexport { Game };\n","import { ConditionValue } from \"./Enums/ConditionValue.js\";\nconst Snake = {\n    startX: ConditionValue.startX,\n    startY: ConditionValue.startY,\n    stateRight: true,\n    stateLeft: true,\n    stateUp: true,\n    stateDown: true,\n    bodys: [[ConditionValue.startY, ConditionValue.startX], [1, 2], [1, 2, 3, 4]],\n    pointYX: [ConditionValue.startX, ConditionValue.startY],\n    nowProgressed: undefined,\n    onX: ConditionValue.startX,\n    onY: ConditionValue.startY,\n    getLastY: () => {\n        return Snake.bodys[Snake.bodys.length - 1][0];\n    },\n    getLastX: () => {\n        return Snake.bodys[Snake.bodys.length - 1][1];\n    }\n};\nexport { Snake };\n","import { ConditionValue } from \"../Domain/Enums/ConditionValue.js\";\nimport { Snake } from '../Domain/Snake.js';\nconst BoardService = {\n    initTable: (element) => {\n        for (let i = 0; i < ConditionValue.col; i++) {\n            const tr = document.createElement('tr');\n            element.append(tr);\n            for (let j = 0; j < ConditionValue.row; j++) {\n                const td = document.createElement('td');\n                document.getElementsByTagName('tr')[i].append(td);\n            }\n        }\n    },\n    makePoint: () => {\n        while (true) {\n            const numX = Math.floor(Math.random() * (ConditionValue.row - 1));\n            const numY = Math.floor(Math.random() * (ConditionValue.col - 1));\n            const snakes = Snake.bodys;\n            for (let i in snakes) {\n                if (numY == snakes[i][0] && numX == snakes[i][1]) {\n                    continue;\n                }\n            }\n            return [numY, numX];\n        }\n    }\n};\nexport { BoardService };\n","// import { classList } from '../Domain/Enums/ClassList.ts';\nimport { ConditionValue } from '../Domain/Enums/ConditionValue.js';\nimport { KeyCode } from '../Domain/Enums/KeyCodeList.js';\nconst SnakeService = {\n    addSnake: (Snake, y, x) => {\n        Snake.bodys.unshift([y, x]);\n    },\n    removeSnake: (Snake) => {\n        Snake.bodys.pop();\n    },\n    initBodys: () => {\n        return [ConditionValue.startX, ConditionValue.startY];\n    },\n    checkOver: (x, y, element) => {\n        if ((x >= ConditionValue.row ||\n            y >= ConditionValue.col ||\n            x < 0 ||\n            y < 0) ||\n            element[y].children[x].classList.contains('snake')) { //벽, 자기자신의 몸통에 충돌시 over함수 작동\n            return true; //setinterval 동작에서는 필요없지만 동기적으로 작동하는 움직임에서는 over가 작동시 true를 리턴\n        }\n    },\n    move: (inputCode, Snake) => {\n        Snake.nowProgressed && clearInterval(Snake.nowProgressed);\n        if (inputCode == KeyCode.ArrowRight && Snake.stateRight) {\n            Snake.stateRight = false;\n            Snake.stateLeft = false,\n                Snake.stateUp = true;\n            Snake.stateDown = true;\n            Snake.onX += 1;\n            return true;\n        }\n        else if (inputCode == KeyCode.ArrowLeft && Snake.stateLeft) {\n            Snake.stateRight = false;\n            Snake.stateLeft = false,\n                Snake.stateUp = true;\n            Snake.stateDown = true;\n            Snake.onX -= 1;\n            return true;\n        }\n        else if (inputCode == KeyCode.ArrowUp && Snake.stateUp) {\n            Snake.stateRight = true;\n            Snake.stateLeft = true,\n                Snake.stateUp = false;\n            Snake.stateDown = false;\n            Snake.onY -= 1;\n            return true;\n        }\n        else if (inputCode == KeyCode.ArrowDown && Snake.stateDown) {\n            Snake.stateRight = true;\n            Snake.stateLeft = true,\n                Snake.stateUp = false;\n            Snake.stateDown = false;\n            Snake.onY += 1;\n            return true;\n        }\n        return false;\n    },\n    onHit: (Snake) => {\n        const [pointY, pointX] = Snake.pointYX;\n        if (Snake.onY === pointY && Snake.onX === pointX) {\n            return true;\n        }\n    },\n};\nexport { SnakeService };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { BoardService } from './application/Model/Service/BoardService.js';\nimport { Documents } from './application/Model/Domain/Documents.js';\nimport { Snake } from './application/Model/Domain/Snake.js';\nimport { SnakeService } from './application/Model/Service/SnakeService.js';\nimport { Game } from './application/Model/Domain/Game.js';\nimport { KeyCode } from './application/Model/Domain/Enums/KeyCodeList.js';\nimport { ClassList } from './application/Model/Domain/Enums/ClassList.js';\nconst Controller = {\n    Snake: Snake,\n    SnakeService: SnakeService,\n    Documents: Documents,\n    addClassSnake: (y, x) => {\n        Controller.Documents.position[y].children[x].classList.add(ClassList.snake);\n    },\n    addClassPoint: (y, x) => {\n        Controller.Documents.position[y].children[x].classList.add(ClassList.point);\n    },\n    removeClassSnake: (y, x) => {\n        Controller.Documents.position[y].children[x].classList.remove(ClassList.snake);\n    },\n    removeClassPoint: (y, x) => {\n        Controller.Documents.position[y].children[x].classList.remove(ClassList.point);\n    },\n    gameStart: () => {\n        BoardService.initTable(Documents.table);\n        Game.snakeInit(Controller.Snake);\n    },\n    gameInit: () => {\n        Game.snakeInit(Controller.Snake);\n    },\n    move: (keyCode) => {\n        if (KeyCode[keyCode]) {\n            if (Controller.SnakeService.move(keyCode, Controller.Snake)) {\n                ;\n                Controller.SnakeService.addSnake(Controller.Snake, Controller.Snake.onY, Controller.Snake.onX);\n                Controller.addClassSnake(Controller.Snake.onY, Controller.Snake.onX);\n                console.log(Snake.bodys);\n                Controller.removeClassSnake(Controller.Snake.getLastY(), Controller.Snake.getLastX());\n                Controller.SnakeService.removeSnake(Controller.Snake);\n            }\n        }\n    }\n};\nController.gameStart();\ndocument.addEventListener(\"keydown\", (e) => {\n    Controller.move(e.code);\n});\n// const table = document.querySelector('#main__wrapper');\n// for(let i = 0; i < 30; i++){\n//     const tr = document.createElement('tr');\n//     table.append(tr);\n//     for(let j = 0; j < 36; j++){\n//         const td = document.createElement('td');\n//         document.getElementsByTagName('tr')[i].append(td);\n//     }\n// }\n// const cookieArr = document.cookie.split('; ');\n// let CookieMode = undefined;\n// for(let i = 0; i < cookieArr.length; i++) {\n//     if(cookieArr[i].indexOf('mode') !== -1) {\n//         CookieMode = Number(cookieArr[i].slice(5));\n//         break;\n//     }\n// }\n// function over (x,y) {\n//     if((x > 35 || y > 29 || x < 0 || y < 0) || position[y].childNodes[x].classList.contains('snake')) {//벽, 자기자신의 몸통에 충돌시 over함수 작동\n//         isModal = 1 //모달창의 상태변수\n//         clearsetinterval.forEach(intervals => clearInterval(intervals)); //현재 실행중인 모든 setInterval 종료\n//         state.right = 0, state.left = 0, state.up = 0, state.down = 0;   //재시작을 위해 모든 진행방향의 상태 초기화\n//         onX = 10;                                                        //초기좌표X 초기화\n//         onY = 15;                                                        //초기좌표Y\n//         // for(let i = 0; i < snake.length-1; i++){                         //각좌표의 정보를 담은 배열의 맨마지막을 제외한 모든 좌표들 snake클래스 제거\n//         //     position[snake[i][0]].childNodes[snake[i][1]].classList.toggle('snake');\n//         // }\n//         // snake = [[snake[snake.length-1][0], snake[snake.length-1][1]]];  //snake배열에 맨마지막 좌표만을 남기는 걸로 세팅\n//         document.querySelector('.gameover__modal__wrapper').style.display = 'block'; //모달 창 화면에 display:block\n//         sending_point = dp_point                                         //서버로 보내기위한 점수 유지\n//         speed == 40                                                      //설정되어있던 속도에 따라 하드, 노말 모드 표시\n//         ? document.getElementsByClassName('result__point')[0].textContent = `점수 : ${dp_point}점 (하드)`\n//         : document.getElementsByClassName('result__point')[0].textContent = `점수 : ${dp_point}점 (노말)`;\n//         dp_point = 0;\n//         document.getElementsByClassName('dp__point')[0].textContent = `점수 : ${dp_point}점` //점수판과 dp_point를 0으로 동시 초기화\n//         document.body.style.animation = 'shaking 0.2s'                   //화면에 진동효과 css 부여\n//         table.className = ''                                             //점수에 따라 변하는 table의 클래스이름 초기화\n//         return true                                                      //setinterval 동작에서는 필요없지만 동기적으로 작동하는 움직임에서는 over가 작동시 true를 리턴\n//     }\n// }\n// let position = document.getElementsByTagName('tr'); //tr의 dom 추출\n// let onX = 10;                                       //앞으로 이동할때마다 변하게 될 x좌표\n// let onY = 15;                                       //앞으로 이동할때마다 변하게 될 y좌표\n// let state = {right : 0, left : 0, up : 0, down : 0};//오른쪽으로 이동도중에는 위,아래 방향만 가능하도록 현재 진행중인 상태를 표시\n// let snake = [                                        \n//     [onY,onX],\n// ];                                                  //각 snake의 좌표를 저장\n// let nowstarted;                                     //현재 진행중인 setinterval을 저장할 변수\n// let dp_point = 0;                                   //점수변수\n// let isModal = 0;                                    //모달의 활성화 유무\n// let [aY,aX] = make()                                //먹으면 점수가 증가하게 하는 포인트의 랜덤좌표만드는 함수\n// let speed = 70;                       //speed의 변수에 따라 속도의 변화가 있음 기본값 0.07초\n// let user_name = ''                                  //서버에 post할때 사용하게 될 변수\n// let sending_point = 0;                              //서버에 post할때 사용하게 될 변수\n// position[aY].childNodes[aX].classList.toggle('point');//초기 랜덤좌표에 포인트 생성\n// position[onY].childNodes[onX].classList.toggle('snake');//초기좌표에 시작 snake생성\n// let clearsetinterval = [];                          //현재 진행중인 setinterval들이 담길 배열\n// document.addEventListener('DOMContentLoaded', function () {\n//     CookieMode == 70 ? document.querySelector('.now__mode').textContent='노말' : document.querySelector('.now__mode').textContent='하드'\n// })\n// function make () {  //범위 안의 랜덤좌표 생성 이때 snake가 존재하는 tr위에 랜덤좌표가 생성시 다시 랜덤좌표를 뽑음\n//     while(1) {\n//         let numX = Math.floor(Math.random() * (35))\n//         let numY = Math.floor(Math.random() * (29))\n//         let istrue = 0;\n//         for(let i = 0; i < snake.length; i++){\n//             if(numY == snake[i][0] && numX == snake[i][1]) {\n//                 istrue = 1;\n//                 break;\n//             }\n//         }\n//         if(istrue == 0) {\n//             return [numY, numX];\n//         }\n//     }\n//     return [numY, numX]\n// }\n// const async = (dic) => {\n//     let touch = 0;\n//         dic == 'right'\n//           ? onX++\n//           : dic == 'left'\n//           ? onX--\n//           : dic == 'up'\n//           ? onY--\n//           : dic == 'down'\n//           ? onY++\n//           : undefined;\n//         if (aY == onY && aX == onX) {\n//           touch = 1;\n//           position[onY].childNodes[onX].classList.toggle('point');\n//           [aY, aX] = make();\n//           position[aY].childNodes[aX].classList.toggle('point');\n//           document.getElementsByClassName('dp__point')[0].textContent = `점수 : ${++dp_point}`;\n//           let quotient = Math.floor(dp_point/15);\n//           console.log(quotient)\n//           1 <= quotient && quotient < 2 ? table.className = 'optic'\n//           : 2 <= quotient && quotient < 3 ? table.className = 'blue'\n//           : 3 <= quotient && quotient < 4 ? table.className = 'purple'\n//           : 4 <= quotient && quotient < 5 ? table.className = 'yellow'\n//           : 5 <= quotient && quotient < 6 ? table.className = 'red'\n//           : table.className = ''\n//         }\n//         let isOver = over(onX,onY)\n//         snake.unshift([onY, onX]);\n//         position[onY].childNodes[onX].classList.toggle('snake');\n//         if (touch == 0) {\n//           position[snake[snake.length - 1][0]].childNodes[snake[snake.length - 1][1]].classList.toggle('snake');\n//           snake.pop();\n//         }\n//         return isOver == true ? true : false\n// }\n// const forward = (dic) => {\n//     if (started) { // inter 변수가 존재하지 않을 때에만 setInterval 실행\n//         inter = setInterval(() => {\n//         nowstarted = inter;\n//         let touch = 0;\n//         if (aY == onY && aX == onX) {\n//           touch = 1;\n//           position[onY].childNodes[onX].classList.toggle('point');\n//           [aY, aX] = make();\n//           position[aY].childNodes[aX].classList.toggle('point');\n//           document.getElementsByClassName('dp__point')[0].textContent = `점수 : ${++dp_point}`;\n//           let quotient = Math.floor(dp_point/15);\n//           console.log(quotient)\n//           1 <= quotient && quotient < 2 ? table.className = 'optic'\n//           : 2 <= quotient && quotient < 3 ? table.className = 'blue'\n//           : 3 <= quotient && quotient < 4 ? table.className = 'purple'\n//           : 4 <= quotient && quotient < 5 ? table.className = 'yellow'\n//           : 5 <= quotient && quotient < 6 ? table.className = 'red'\n//           : table.className = ''\n//         }\n//         over(onX, onY);\n//         snake.unshift([onY, onX]);\n//         position[onY].childNodes[onX].classList.toggle('snake');\n//         if (touch == 0) {\n//           position[snake[snake.length - 1][0]].childNodes[snake[snake.length - 1][1]].classList.toggle('snake');\n//           snake.pop();\n//         }\n//       }, speed);\n//     }\n// };\n// document.addEventListener('keydown',function(e) {\n//     if(isModal == 0) {\n//             if(e.code == 'ArrowRight') {\n//                 if(state.right != 1 && state.left != 1) {\n//                     state.right = 1, state.left = 1, state.up = 0, state.down = 0;\n//                     clearInterval(nowstarted)\n//                     if(async('right')) return\n//                     nowstarted = right = setInterval(() => {\n//                     clearsetinterval.push(right);\n//                     let touch = 0;\n//                     onX++\n//                     if (aY == onY && aX == onX) {\n//                     touch = 1;\n//                     position[onY].childNodes[onX].classList.toggle('point');\n//                     [aY, aX] = make();\n//                     position[aY].childNodes[aX].classList.toggle('point');\n//                     document.getElementsByClassName('dp__point')[0].textContent = `점수 : ${++dp_point}`;\n//                     let quotient = Math.floor(dp_point/15);\n//                     console.log(quotient)\n//                     1 <= quotient && quotient < 2 ? table.className = 'optic'\n//                     : 2 <= quotient && quotient < 3 ? table.className = 'blue'\n//                     : 3 <= quotient && quotient < 4 ? table.className = 'purple'\n//                     : 4 <= quotient && quotient < 5 ? table.className = 'yellow'\n//                     : 5 <= quotient && quotient < 6 ? table.className = 'red'\n//                     : table.className = ''\n//                     }    \n//                     over(onX, onY);\n//                     snake.unshift([onY, onX]);\n//                     position[onY].childNodes[onX].classList.toggle('snake');\n//                     if (touch == 0) {\n//                         position[snake[snake.length - 1][0]].childNodes[snake[snake.length - 1][1]].classList.toggle('snake');\n//                         snake.pop();\n//                     }    \n//                     }, speed);\n//                 }\n//             } else if (e.code == 'ArrowLeft') {\n//                 if(state.left != 1 && state.right != 1) {\n//                 state.right = 1, state.left = 1, state.up = 0, state.down = 0;\n//                 clearInterval(nowstarted)\n//                     if(async('left')) return\n//                         nowstarted = left = setInterval(() => {\n//                         clearsetinterval.push(left);\n//                         let touch = 0;\n//                         onX--\n//                         if (aY == onY && aX == onX) {\n//                         touch = 1;\n//                         position[onY].childNodes[onX].classList.toggle('point');\n//                         [aY, aX] = make();\n//                         position[aY].childNodes[aX].classList.toggle('point');\n//                         document.getElementsByClassName('dp__point')[0].textContent = `점수 : ${++dp_point}`;\n//                         let quotient = Math.floor(dp_point/15);\n//                         console.log(quotient)\n//                         1 <= quotient && quotient < 2 ? table.className = 'optic'\n//                         : 2 <= quotient && quotient < 3 ? table.className = 'blue'\n//                         : 3 <= quotient && quotient < 4 ? table.className = 'purple'\n//                         : 4 <= quotient && quotient < 5 ? table.className = 'yellow'\n//                         : 5 <= quotient && quotient < 6 ? table.className = 'red'\n//                         : table.className = ''\n//                         }   \n//                         over(onX, onY);\n//                         snake.unshift([onY, onX]);\n//                         position[onY].childNodes[onX].classList.toggle('snake');\n//                         if (touch == 0) {\n//                             position[snake[snake.length - 1][0]].childNodes[snake[snake.length - 1][1]].classList.toggle('snake');\n//                             snake.pop();\n//                         }\n//                     }, speed);\n//                 }\n//             } else if (e.code == 'ArrowUp') {\n//                 if(state.up != 1 && state.down != 1) {\n//                         state.right = 0, state.left = 0, state.up = 1, state.down = 1;\n//                         clearInterval(nowstarted)\n//                         if(async('up')) return\n//                         nowstarted = up = setInterval(() => {\n//                         clearsetinterval.push(up);\n//                         let touch = 0;\n//                         onY--\n//                         if (aY == onY && aX == onX) {\n//                           touch = 1;\n//                           position[onY].childNodes[onX].classList.toggle('point');\n//                           [aY, aX] = make();\n//                           position[aY].childNodes[aX].classList.toggle('point');\n//                           document.getElementsByClassName('dp__point')[0].textContent = `점수 : ${++dp_point}`;\n//                           let quotient = Math.floor(dp_point/15);\n//                           console.log(quotient)\n//                           1 <= quotient && quotient < 2 ? table.className = 'optic'\n//                           : 2 <= quotient && quotient < 3 ? table.className = 'blue'\n//                           : 3 <= quotient && quotient < 4 ? table.className = 'purple'\n//                           : 4 <= quotient && quotient < 5 ? table.className = 'yellow'\n//                           : 5 <= quotient && quotient < 6 ? table.className = 'red'\n//                           : table.className = ''\n//                         }\n//                         over(onX, onY);\n//                         snake.unshift([onY, onX]);\n//                         position[onY].childNodes[onX].classList.toggle('snake');\n//                         if (touch == 0) {\n//                           position[snake[snake.length - 1][0]].childNodes[snake[snake.length - 1][1]].classList.toggle('snake');\n//                           snake.pop();\n//                         }\n//                       }, speed);\n//                     }\n//             } else if (e.code == 'ArrowDown'){\n//                 if(state.up != 1 && state.down != 1) {\n//                     state.right = 0, state.left = 0, state.up = 1, state.down = 1;\n//                     clearInterval(nowstarted)\n//                         if(async('down')) return\n//                         nowstarted = down = setInterval(() => {\n//                         clearsetinterval.push(down);\n//                         let touch = 0;\n//                         onY++\n//                         if (aY == onY && aX == onX) {\n//                           touch = 1;\n//                           position[onY].childNodes[onX].classList.toggle('point');\n//                           [aY, aX] = make();\n//                           position[aY].childNodes[aX].classList.toggle('point');\n//                           document.getElementsByClassName('dp__point')[0].textContent = `점수 : ${++dp_point}`;\n//                           let quotient = Math.floor(dp_point/15);\n//                           console.log(quotient)\n//                           1 <= quotient && quotient < 2 ? table.className = 'optic'\n//                           : 2 <= quotient && quotient < 3 ? table.className = 'blue'\n//                           : 3 <= quotient && quotient < 4 ? table.className = 'purple'\n//                           : 4 <= quotient && quotient < 5 ? table.className = 'yellow'\n//                           : 5 <= quotient && quotient < 6 ? table.className = 'red'\n//                           : table.className = ''\n//                         }\n//                         over(onX, onY);\n//                         snake.unshift([onY, onX]);\n//                         position[onY].childNodes[onX].classList.toggle('snake');\n//                         if (touch == 0) {\n//                           position[snake[snake.length - 1][0]].childNodes[snake[snake.length - 1][1]].classList.toggle('snake');\n//                           snake.pop();\n//                         }\n//                       }, speed);\n//                     }\n//             }\n//         }\n//     })\n// document.querySelector('.nomal').addEventListener('click',function (){\n//     if(isModal == 0) {\n//         speed = 70;\n//         document.querySelector('.now__mode').textContent='노말'\n//     }\n// })\n// document.querySelector('.hard').addEventListener('click',function (){\n//     if(isModal == 0) {\n//         speed = 40;\n//         document.querySelector('.now__mode').textContent='하드'\n//     }\n// })\n// document.getElementsByClassName('cancle')[0].addEventListener('click',function () {\n//     state.right = 0, state.left = 0, state.up = 0, state.down = 0;\n//     document.querySelector('.gameover__modal__wrapper').style.display = 'none';\n//     isModal = 0;\n//     document.body.style.animation = '';\n//     document.querySelector('.NOMAL').innerHTML='';\n//     document.querySelector('.HARD').innerHTML='';\n//     axios.get('http://211.202.195.102:4000/ranking')\n//     .then(res => {\n//         const {data} = res;\n//         console.log(data);\n//         let n_num = 1;\n//         let h_num = 1;\n//         if(data.length != 0){\n//             for(let i = 0; i < data.length; i++){\n//                 const li = document.createElement('li');\n//                 if(data[i].mode == 40) {\n//                     li.textContent = `${h_num}등 ${data[i].name} ${data[i].point}점`\n//                     document.querySelector('.HARD').appendChild(li);\n//                     h_num++;\n//                 } else {\n//                     li.textContent = `${n_num}등 ${data[i].name} ${data[i].point}점`\n//                     document.querySelector('.NOMAL').appendChild(li);\n//                     n_num++;\n//                 }\n//             }\n//         }\n//     })\n// })\n// document.querySelector('.user__name').addEventListener('change',function(e){\n//     user_name = e.target.value;\n// })\n// document.getElementsByClassName('save')[0].addEventListener('click',function () {\n//     state.right = 0, state.left = 0, state.up = 0, state.down = 0;\n//     document.querySelector('.gameover__modal__wrapper').style.display = 'none';\n//     isModal = 0;\n//     document.body.style.animation = ''\n//     document.querySelector('.NOMAL').innerHTML='';\n//     document.querySelector('.HARD').innerHTML='';\n//     document.querySelector('.user__name').value='';\n//     console.log(speed);\n//     axios.post('http://211.202.195.102:4000',{name : user_name, point : sending_point, mode : speed})\n//     .then(res => {\n//         const {data} = res;\n//         console.log(data);\n//         let n_num = 1;\n//         let h_num = 1;\n//         if(data.length != 0){\n//             for(let i = 0; i < data.length; i++){\n//                 const li = document.createElement('li');\n//                 if(data[i].mode == 40) {\n//                     li.textContent = `${h_num}등 ${data[i].name} ${data[i].point}점`\n//                     document.querySelector('.HARD').appendChild(li);\n//                     h_num++;\n//                 } else {\n//                     li.textContent = `${n_num}등 ${data[i].name} ${data[i].point}점`\n//                     document.querySelector('.NOMAL').appendChild(li);\n//                     n_num++;\n//                 }\n//             }\n//         }\n//     })\n// })\n// document.querySelector('.NOMAL').innerHTML='';\n// document.querySelector('.HARD').innerHTML='';\n// axios.get('http://211.202.195.102:4000/ranking')\n//     .then(res => {\n//         const {data} = res;\n//         console.log(data);\n//         let n_num = 1;\n//         let h_num = 1;\n//         if(data.length != 0){\n//             for(let i = 0; i < data.length; i++){\n//                 const li = document.createElement('li');\n//                 if(data[i].mode == 40) {\n//                     li.textContent = `${h_num}등 ${data[i].name} ${data[i].point}점`\n//                     document.querySelector('.HARD').appendChild(li);\n//                     h_num++;\n//                 } else {\n//                     li.textContent = `${n_num}등 ${data[i].name} ${data[i].point}점`\n//                     document.querySelector('.NOMAL').appendChild(li);\n//                     n_num++;\n//                 }\n//             }\n//         }\n//     })\n"],"names":["ClassList","Documents","table","document","querySelector","position","getElementsByTagName","ConditionValue","KeyCode","BoardService","SnakeService","Game","point","isModal","snakeInit","Snake","onX","startX","onY","startY","bodys","initBodys","pointYX","makePoint","children","classList","toggle","stateRight","stateLeft","stateUp","stateDown","nowProgressed","undefined","getLastY","length","getLastX","initTable","element","i","col","tr","createElement","append","j","row","td","numX","Math","floor","random","numY","snakes","addSnake","y","x","unshift","removeSnake","pop","checkOver","contains","move","inputCode","clearInterval","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","onHit","_Snake$pointYX","_slicedToArray","pointY","pointX","Controller","addClassSnake","add","snake","addClassPoint","removeClassSnake","remove","removeClassPoint","gameStart","gameInit","keyCode","console","log","addEventListener","e","code"],"sourceRoot":""}